version: 2

setup_python_macos: &setup_python_macos
  run:
    name: Install Python
    command: |
      git clone https://github.com/pyenv/pyenv.git ~/.pyenv
      echo 'export PYENV_ROOT="$HOME/.pyenv"' >> $BASH_ENV
      echo 'export PATH="$PYENV_ROOT/shims:$PYENV_ROOT/bin:$PATH"' >> $BASH_ENV
      PYTHON_CONFIGURE_OPTS="--enable-framework" ~/.pyenv/bin/pyenv install 3.8.6
      ~/.pyenv/bin/pyenv local 3.8.6

jobs:
  build:
    docker:
      - image: circleci/python:3.8-node-browsers
        environment:
          ## this enables colors in the output
          TERM: xterm
          NODE_OPTIONS: --max-old-space-size=2048
    # Using large instance to avoid frequent failures of frontend build step
    resource_class: large
    working_directory: ~/app
    steps:
      - checkout
      - restore_cache:
          key: npm-cache-{{ .Branch }}-{{ checksum "package-lock.json" }}
      - run:
          name: Install Dependencies
          command: npm ci --unsafe-perm
          no_output_timeout: 30m
      - save_cache:
          key: npm-cache-{{ .Branch }}-{{ checksum "package-lock.json" }}
          paths:
            - ~/app/node_modules/
            - /home/circleci/.cache/Cypress
      - run: npm run test:ci
      - store_artifacts:
          path: /home/circleci/app/cypress/screenshots/
  python_test:
    docker:
      - image: circleci/python:3.8
    working_directory: ~/app
    steps:
      - checkout
      - run:
          name: Install Dependencies
          command: pip install -r requirements.txt
      - run:
          name: Run linter for Python sources
          command: make lint
      - run:
          name: Run Python unit tests
          command: make test
      - run:
          name: Generate test coverage report
          command: coverage html --include "satellite/*"
      - store_artifacts:
          path: htmlcov
  python_test_dist_linux:
    docker:
      - image: circleci/python:3.8
    working_directory: ~/app
    steps:
      - checkout
      - run:
          name: Install Dependencies
          command: pip install -r requirements.txt
      - run:
          name: Build distribution
          command: make dist
      - run:
          name: Test distribution
          command: make test_dist
      - store_artifacts:
          path: dist/vgs-satellite-backend
  python_test_dist_macos:
    macos:
      xcode: 10.2.1
    working_directory: ~/app
    steps:
      - checkout
      - <<: *setup_python_macos
      - run:
          name: Install Dependencies
          command: |
            pip install --upgrade pip
            pip install -r requirements.txt
      - run:
          name: Build distribution
          command: make dist
      - run:
          name: Test distribution
          command: make test_dist
      - store_artifacts:
          path: dist/vgs-satellite-backend
  smoketest:
    docker:
      - image: circleci/python:3.8-node-browsers
        environment:
          TERM: xterm
    working_directory: ~/app
    steps:
      - checkout
      - restore_cache:
          key: npm-cache-{{ .Branch }}-{{ checksum "package-lock.json" }}
      - run:
          name: Install Dependencies
          command: npm ci --unsafe-perm
      - save_cache:
          key: npm-cache-{{ .Branch }}-{{ checksum "package-lock.json" }}
          paths:
            - ~/app/node_modules/
            - /home/circleci/.cache/Cypress
      - run:
          name: Test YAML Consistency
          command: |
            CYPRESS_BASE_URL=https://dashboard.$VGS_DASHBOARD_DOMAIN \
            CYPRESS_VGS_DASHBOARD_DOMAIN=$VGS_DASHBOARD_DOMAIN \
            CYPRESS_VGS_DASHBOARD_EMAIL=$VGS_DASHBOARD_EMAIL \
            CYPRESS_VGS_DASHBOARD_PASS=$VGS_DASHBOARD_PASS \
            npm run cy:smoke
      - store_artifacts:
          path: /home/circleci/app/cypress/screenshots/

  build_app_macos:
    macos:
      xcode: 10.2.1
    working_directory: ~/app
    steps:
      - checkout
      - run:
          name: Check app version
          command: ./scripts/check-version.sh
      - <<: *setup_python_macos
      - run:
          name: Install node
          command: |
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.37.2/install.sh | bash
            echo 'export NVM_DIR="$HOME/.nvm"' >> $BASH_ENV
            . ~/.nvm/nvm.sh
            nvm install 14.15.0
      - run:
          name: Install Dependencies
          command: |
            pip install --upgrade pip
            pip install -r requirements.txt
            . $NVM_DIR/nvm.sh
            nvm use 14.15.0
            npm ci
      - run:
          name: Build the app
          command: |
            . $NVM_DIR/nvm.sh
            nvm use 14.15.0
            HEAP_ID=${HEAP_TRACKING_ID} npm run electron:build
            mkdir ./artifacts
            cp build/vgs-satellite-*.dmg ./artifacts
          no_output_timeout: 30m
      - persist_to_workspace:
          root: artifacts
          paths:
            - "*"
      - store_artifacts:
          path: artifacts

  build_app_linux:
    docker:
      - image: circleci/python:3.8-node-browsers
    # Using large instance to avoid frequent failures of frontend build step
    resource_class: large
    working_directory: ~/app
    steps:
      - checkout
      - run:
          name: Check app version
          command: ./scripts/check-version.sh
      - run:
          name: Install Dependencies
          command: |
            pip3 install -r requirements.txt
            npm ci --unsafe-perm
      - run:
          name: Build the app
          command: HEAP_ID=${HEAP_TRACKING_ID} npm run electron:build
      - persist_to_workspace:
          root: build
          paths:
            - vgs-satellite-*.AppImage

  publish_app:
    docker:
      - image: cibuilds/github:0.13
    steps:
      - attach_workspace:
          at: ./artifacts
      - run:
          name: Publish Release
          command: |
            ghr -draft -t ${GITHUB_TOKEN} -u ${CIRCLE_PROJECT_USERNAME} -r ${CIRCLE_PROJECT_REPONAME} -c ${CIRCLE_SHA1} -n ${CIRCLE_TAG} ${CIRCLE_TAG} ./artifacts
#            ./scripts/slack_notify.sh


  build_and_publish_docker_image:
    docker:
      - image: circleci/golang:1.15
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
          docker_layer_caching: true
      - run:
          name: Build & Publish Docker image
          command: make docker_publish

workflows:
  version: 2
  build_and_test:
    jobs:
      - build
      - python_test
      - python_test_dist_linux
      - python_test_dist_macos

  release:
    jobs:
      - build_app_macos:
          filters:
            tags:
              only: /^\d+\.\d+\.\d+(-[a-z]+)?$/
            branches:
              ignore: /.*/
      - build_app_linux:
          filters:
            tags:
              only: /^\d+\.\d+\.\d+(-[a-z]+)?$/
            branches:
              ignore: /.*/
      - publish_app:
          filters:
            tags:
              only: /^\d+\.\d+\.\d+(-[a-z]+)?$/
            branches:
              ignore: /.*/
          requires:
            - build_app_macos
            - build_app_linux
      - build_and_publish_docker_image:
          filters:
            tags:
              only: /^\d+\.\d+\.\d+(-[a-z]+)?$/
            branches:
              ignore: /.*/

  # periodical_smoke_test:
  #   ## create dashboard route by uploading satellite-generated YAML
  #   triggers:
  #     - schedule:
  #         cron: "0 8 * * *"
  #         filters:
  #           branches:
  #             only:
  #               - master
  #   jobs:
  #     - smoketest
